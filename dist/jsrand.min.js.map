{
  "version": 3,
  "sources": [
    "../../../../../opt/homebrew/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/jsrand.js",
    "src/jsrand_browser.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "/** @format @flow */\n/*!\n * jsrand - https://github.com/DomenicoDeFelice/jsrand\n *\n * Copyright (c) 2014-2025 Domenico De Felice\n * Released under the MIT License\n *\n * @license\n */\n\n'use strict';\n\ntype State = {|\n  seed: number,\n  mz: number,\n  mw: number,\n|};\n\nfunction Srand(seed?: number) {\n  if (seed != null) {\n    this.seed(seed);\n  } else {\n    this.randomize();\n  }\n}\n\nSrand.prototype = {};\n\n/**\n * Set or get (if no argument is given) the seed for the pseudo-random\n * number generator. The seed can be any float or integer number.\n */\nSrand.seed = Srand.prototype.seed = function (seed?: number): number {\n  if (seed == null) {\n    return this._seed;\n  }\n\n  // Use only one seed (mw), mz is fixed.\n  // Must not be zero, nor 0x9068ffff.\n  this._mz = 123456789;\n\n  return (this._mw = this._seed = seed);\n};\n\n/**\n * Set and return a random seed.\n */\nSrand.randomize = Srand.prototype.randomize = function (): number {\n  return this.seed(1 + Math.floor(Math.random() * 0xffffffff));\n};\n\n/**\n * Return an object with the state of the generator. Use setState to\n * resume the state.\n */\nSrand.getState = Srand.prototype.getState = function (): State {\n  return {\n    seed: this._seed,\n    mz: this._mz,\n    mw: this._mw,\n  };\n};\n\n/**\n * Resume a state previously returned by getState.\n */\nSrand.setState = Srand.prototype.setState = function (state: State) {\n  if (\n    state == null ||\n    typeof state !== 'object' ||\n    typeof state.seed !== 'number' ||\n    typeof state.mz !== 'number' ||\n    typeof state.mw !== 'number'\n  ) {\n    throw new Error('Invalid state.');\n  }\n\n  this._seed = state.seed;\n  this._mz = state.mz;\n  this._mw = state.mw;\n};\n\n/**\n * Return a pseudo-random number between 0 inclusive and 1 exclusive.\n *\n * The algorithm used is MWC (multiply-with-carry) by George Marsaglia.\n *\n * Implementation based on:\n * - http://en.wikipedia.org/wiki/Random_number_generation#Computational_methods\n * - http://stackoverflow.com/questions/521295/javascript-random-seeds#19301306\n */\nSrand.random = Srand.prototype.random = function (): number {\n  if (this._seed == null) {\n    this.randomize();\n  }\n\n  let mz = this._mz;\n  let mw = this._mw;\n\n  // The 16 least significant bits are multiplied by a constant\n  // and then added to the 16 most significant bits. 32 bits result.\n  mz = ((mz & 0xffff) * 36969 + (mz >> 16)) & 0xffffffff;\n  mw = ((mw & 0xffff) * 18000 + (mw >> 16)) & 0xffffffff;\n\n  this._mz = mz;\n  this._mw = mw;\n\n  const x = (((mz << 16) + mw) & 0xffffffff) / 0x100000000;\n  return 0.5 + x;\n};\n\n/**\n * Return a pseudo-random float number between a inclusive and b exclusive.\n */\nSrand.inRange = Srand.prototype.inRange = function (\n  a: number,\n  b: number\n): number {\n  return a + this.random() * (b - a);\n};\n\n/**\n * Return a psuedo-random integer between min and max inclusive.\n */\nSrand.intInRange = Srand.prototype.intInRange = function (\n  min: number,\n  max: number\n): number {\n  return min + Math.floor(this.random() * (max - min + 1));\n};\n\n/**\n * Return a random element from the input array.\n *\n * If arr is empty, an exception is thrown.\n */\nSrand.choice = Srand.prototype.choice = function <T>(arr: Array<T>): T {\n  if (arr.length === 0) {\n    throw new Error('Cannot choose random element from empty array.');\n  }\n\n  const randomIndex = this.intInRange(0, arr.length - 1);\n  return arr[randomIndex];\n};\n\n/**\n * Return a k-sized array sampled with replacement from the input array,\n * i.e. each element can be sampled more than once.\n *\n * If k > 0 and arr is empty, throws an exception.\n */\nSrand.choices = Srand.prototype.choices = function <T>(\n  arr: Array<T>,\n  k: number\n): Array<T> {\n  const sample = new Array(k);\n\n  for (let i = 0; i < k; i++) {\n    sample[i] = this.choice(arr);\n  }\n\n  return sample;\n};\n\n/**\n * Return a k-sized array sampled without replacement from the input array.\n *\n * If k > arr.length an exception is thrown.\n */\nSrand.sample = Srand.prototype.sample = function <T>(\n  arr: Array<T>,\n  k: number\n): Array<T> {\n  if (k > arr.length) {\n    throw new Error('Sample size cannot exceed population size.');\n  }\n\n  if (k === arr.length) {\n    return this.shuffle([...arr]);\n  }\n\n  const maxIndex = arr.length - 1;\n  const sample = new Array(k);\n  const selected = {};\n\n  for (let i = 0, j; i < k; i++) {\n    do {\n      j = this.intInRange(0, maxIndex);\n    } while (selected[j]);\n\n    sample[i] = arr[j];\n    selected[j] = true;\n  }\n\n  return sample;\n};\n\n/**\n * Shuffle the input array using the Fisher-Yates algorithm and return it\n * (the input array is modified).\n */\nSrand.shuffle = Srand.prototype.shuffle = function <T>(\n  arr: Array<T>\n): Array<T> {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = this.intInRange(0, i - 1);\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n\n  return arr;\n};\n\n/**\n * Return a random element from arr based on the provided weights.\n *\n * Weights should be positive numbers. They will be normalized internally,\n * so [1, 2, 3] is equivalent to [0.166, 0.333, 0.5].\n *\n * If arr is empty, an exception is thrown.\n * If weights array length doesn't match arr length, an exception is thrown.\n * If all weights are zero or negative, an exception is thrown.\n */\nSrand.weightedChoice = Srand.prototype.weightedChoice = function <T>(\n  arr: Array<T>,\n  weights: Array<number>\n): T {\n  if (arr.length === 0) {\n    throw new Error('Cannot choose random element from empty array.');\n  }\n\n  if (arr.length !== weights.length) {\n    throw new Error('Items and weights must have the same length.');\n  }\n\n  // Calculate total weight\n  let totalWeight = 0;\n  for (let i = 0; i < weights.length; i++) {\n    if (weights[i] < 0) {\n      throw new Error('Weights must be non-negative.');\n    }\n    totalWeight += weights[i];\n  }\n\n  if (totalWeight === 0) {\n    throw new Error('At least one weight must be greater than zero.');\n  }\n\n  // Generate random value between 0 and totalWeight\n  const randomValue = this.random() * totalWeight;\n\n  // Find the item corresponding to this value\n  let cumulativeWeight = 0;\n  for (let i = 0; i < arr.length; i++) {\n    cumulativeWeight += weights[i];\n    if (randomValue < cumulativeWeight) {\n      return arr[i];\n    }\n  }\n\n  return arr[arr.length - 1];\n};\n\n/**\n * Return a random number from a Gaussian (normal) distribution.\n *\n * Uses the Box-Muller transform to generate normally distributed values.\n *\n * @param mean - The mean (center) of the distribution (default: 0)\n * @param stddev - The standard deviation (spread) of the distribution (default: 1)\n */\nSrand.gaussian = Srand.prototype.gaussian = function (\n  mean: number = 0,\n  stddev: number = 1\n): number {\n  // Box-Muller transform\n  const u1 = this.random();\n  const u2 = this.random();\n\n  const z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n\n  return z0 * stddev + mean;\n};\n\n/**\n * Return a random number from an exponential distribution.\n *\n * Useful for modeling time between events in a Poisson process.\n *\n * @param lambda - The rate parameter (lambda > 0). Higher values produce smaller numbers.\n */\nSrand.exponential = Srand.prototype.exponential = function (\n  lambda: number\n): number {\n  if (lambda <= 0) {\n    throw new Error('For exponential distributions, lambda must be positive.');\n  }\n\n  return -Math.log(1 - this.random()) / lambda;\n};\n\n/**\n * Return a random integer from a Poisson distribution.\n *\n * Useful for modeling the number of events in a fixed interval.\n *\n * @param lambda - The expected number of events (lambda > 0)\n */\nSrand.poisson = Srand.prototype.poisson = function (\n  lambda: number\n): number {\n  if (lambda <= 0) {\n    throw new Error('For Poisson distributions, lambda must be positive.');\n  }\n\n  // Knuth's algorithm for Poisson distribution\n  const L = Math.exp(-lambda);\n  let k = 0;\n  let p = 1;\n\n  do {\n    k++;\n    p *= this.random();\n  } while (p > L);\n\n  return k - 1;\n};\n\n// Keep flow happy.\nSrand._oldSrand = undefined;\nSrand.noConflict = function (): Function {\n  return Srand;\n};\n\nexport default Srand;\n",
    "/** @format @flow */\n\n'use strict';\n\nimport Srand from './jsrand.js';\n\nSrand._oldSrand = window.Srand;\n\n/**\n * In the uncommon case the name `Srand` is already used,\n * restore its initial value and return the Srand object.\n */\nSrand.noConflict = function (): Function {\n  window.Srand = Srand._oldSrand;\n  return Srand;\n};\n\nwindow.Srand = Srand;\n"
  ]
}